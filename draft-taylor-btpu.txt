



Network Working Group                                          R. Taylor
Internet-Draft                                      Aalyria Technologies
Intended status: Standards Track                         14 January 2025
Expires: 18 July 2025


               Bundle Transfer Protocol - Unidirectional
                        draft-taylor-btpu-latest

Abstract

   TODO

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 18 July 2025.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
     2.1.  Terminology
   3.  Protocol Applicability
     3.1.  Assumptions
   4.  Protocol Overview
     4.1.  Segmentation and Transfers
       4.1.1.  Interleaving Segments
       4.1.2.  Cancelling Transfers
       4.1.3.  Transfer Id Roll-over
     4.2.  Handling Datagram Loss
   5.  Message Definitions
     5.1.  Complete Bundle Message
     5.2.  Transfer Start Message
     5.3.  Transfer Segment Message
     5.4.  Transfer Complete Message
     5.5.  Transfer Cancel Message
     5.6.  Padding Message
   6.  Security Considerations
   7.  IANA Considerations
   8.  References
     8.1.  Normative References
     8.2.  Informative References
   Appendix A.  Acknowledgments
   Author's Address

1.  Introduction

   TODO Introduction

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

2.1.  Terminology

   Within the scope of this document, the following terms have specific
   meaning:

   Bundle:  A higher-layer protocol data unit, typically a BPv7 Bundle
      as defined in [RFC9171].

   Link-layer PDU:  The Link-layer Protocol data unit transferred from
      the Sender to the Receiver by the Link-layer protocol, excluding
      any Link-layer Protocol specific headers or metadata that makes up
      a complete transmission unit or frame as defined by the Link-layer
      Protocol specification.

   Datagram:  A series of one or more Messages, formatted according to
      the rules of this specification to fit within a single Link-layer
      PDU.

   Message:  A single protocol data item, see Section 5.

   Transfer:  The context in which the transmission of the Segments of a
      single Bundle occurs.

   Segment:  In order to transfer a Bundle larger than a Datagram,
      Bundles may be subdivided into Segments in order to fit within a
      Datagram.

3.  Protocol Applicability

3.1.  Assumptions

4.  Protocol Overview

4.1.  Segmentation and Transfers

4.1.1.  Interleaving Segments

4.1.2.  Cancelling Transfers

4.1.3.  Transfer Id Roll-over

4.2.  Handling Datagram Loss

5.  Message Definitions

   All Protocol Messages, with the exception of the Padding Message
   (Section 5.6), follow the common "Type-Length-Value" formatting
   pattern, with each message being identified by a 32-bit header that
   encodes the type of the Message, and the length of the content of the
   message.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Type          | Length (24-bit unsigned integer)              |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       ... Content ...                         :
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   Type:  The type of the message, allocated from IANA "BTPU Message
      Types" registry, expressed as a 8-bit unsigned integer in network
      byte order

   Length:  The length of the message in octets, excluding the 4 octets
      of the header itself, expressed as a 24-bit unsigned integer in
      network byte order.

   Content:  A sequence of octets of data, encoded according to the type
      of the Message.

5.1.  Complete Bundle Message

   The Complete Bundle Message is used to encapsulate an entire bundle,
   and SHOULD be used by an implementation when a bundle will fit in its
   entirety in a single Link-Layer PDU to avoid the overhead of
   processing involved with segmentation, and reducing the risk of the
   total loss of a bundle if a one or more unnecessary segments of a
   bundle is lost.

   A Complete Bundle Message has a type of seven (7).  The Message
   Content MUST be a valid bundle.

5.2.  Transfer Start Message

   The Transfer Start Message is used to encapsulate the first segment
   of a new multi-segment Bundle Transfer.

   A Transfer Start Message has a type of five (5).  The Message Content
   is formatted as follows:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Transfer Id                                                   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       ... Content ...                         :
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   Transfer Id:  The numeric identifier of the new Transfer that is
      starting, encoded as a 32-bit unsigned integer in network byte
      order.

   Content:  The octets of the first Segment of the Transfer, with the
      length calculated as the Message content length minus the four (4)
      octets of the Transfer Id.

   The Transfer Start Message does not include an explicit Segment
   Sequence Number as it is always zero (0).

5.3.  Transfer Segment Message

   The Transfer Segment Message is used to encapsulate the next segment
   of an existing multi-segment Bundle Transfer.

   A Transfer Segment Message has a type of one (1).  The Message
   Content is formatted as follows:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Transfer Id                                                   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Segment Sequence Number                                       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |               Content ...                                     :
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   Transfer Id:  The numeric identifier of the Transfer that this
      Segment is part of, encoded as a 32-bit unsigned integer in
      network byte order.

   Segment Sequence Number:  The sequence number of the Segment, encoded
      as a 32-bit unsigned integer in network byte order.

   Content:  The octets of a Segment of the Transfer, with the length
      calculated as the Message content length minus the eight (8)
      octets of the Transfer Id and Segment Sequence Number.

5.4.  Transfer Complete Message

   The Transfer Complete Message is used to encapsulate the last segment
   of a multi-segment Bundle Transfer, and complete the Transfer.

   A Transfer Complete Message has a type of three (3).  The Message
   Content is formatted as follows:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Transfer Id                                                   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Segment Sequence Number                                       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |               Content ...                                     :
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   Transfer Id:  The numeric identifier of the Transfer that is
      completing, encoded as a 32-bit unsigned integer in network byte
      order.

   Segment Sequence Number:  The sequence number of the final Segment,
      encoded as a 32-bit unsigned integer in network byte order.

   Content:  The octets of the final Segment of the Transfer, with the
      length calculated as the Message content length minus the eight
      (8) octets of the Transfer Id and Segment Sequence Number.

5.5.  Transfer Cancel Message

   The Transfer Cancel Message is used to cancel an in-progress multi-
   segment Bundle Transfer.

   A Transfer Cancel Message has a type of eleven (11).  The Message
   Content is formatted as follows:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Transfer Id                                                   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   Transfer Id:  The numeric identifier of the Transfer that is
      cancelled, encoded as a 32-bit unsigned integer in network byte
      order.

   The Transfer Cancel Message has no additional content, and hence has
   a fixed length of 4 octets.

5.6.  Padding Message

   When the Link-layer Protocol requires Link-layer PDUs of a fixed
   size, the Padding Message SHOULD be used in order to increase the
   length of the Datagram to meet the Link-layer PDU size requirement.

   A Padding Message has a type of zero (0), but in order to support a
   Padding Message with a minimum total length of one octet, the Message
   does not include a Length or Content field, and hence has the
   following layout:

    0 1 2 3 4 5 6 7
   +-+-+-+-+-+-+-+-+
   | Type          |
   +-+-+-+-+-+-+-+-+

   Type:  The type of the message, in this case zero (0).

   A Padding Message MUST be the final Message in a Datagram.  A sender
   SHOULD set the value of any remaining octets in the Datagram to zero
   (0), and a receiver MUST ignore any octets that follow the Padding
   Message.

   When the Link-layer Protocol provides variable length Link-layer
   PDUs, Sender implementations SHOULD take into account the mechanisms
   used by the Link-layer Protocol to support variable length Link-layer
   PDUs, and emit Datagrams of a suitable size for the underlying Link-
   layer Protocol.  For example, if variable length Link-layer PDUs are
   implemented by the Link-layer Protocol using a sub-framing mechanism,
   then emitting Datagrams of a single, or whole number of sub-frames
   may increase reliability.  The Padding Message MAY be used to meet
   such requirements.

6.  Security Considerations

   TODO Security

7.  IANA Considerations

   This document has no IANA actions.

8.  References

8.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

8.2.  Informative References

   [RFC9171]  Burleigh, S., Fall, K., and E. Birrane, III, "Bundle
              Protocol Version 7", RFC 9171, DOI 10.17487/RFC9171,
              January 2022, <https://www.rfc-editor.org/rfc/rfc9171>.

Appendix A.  Acknowledgments

   TODO acknowledge.

Author's Address

   Rick Taylor
   Aalyria Technologies
   Email: rtaylor@aalyria.com
