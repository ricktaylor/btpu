



Network Working Group                                          R. Taylor
Internet-Draft                                      Aalyria Technologies
Intended status: Standards Track                         21 January 2025
Expires: 25 July 2025


               Bundle Transfer Protocol - Unidirectional
                        draft-taylor-btpu-latest

Abstract

   TODO

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 25 July 2025.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
     2.1.  Terminology
   3.  Protocol Overview
     3.1.  Applicability
     3.2.  Messages
     3.3.  Segmentation and Transfers
       3.3.1.  Interleaving Segments
       3.3.2.  Transfer Number Roll-over
     3.4.  Handling Link-layer PDU Loss
       3.4.1.  Segment Repetition
   4.  Message Definitions
     4.1.  Complete Bundle Message
     4.2.  Transfer Start Message
     4.3.  Transfer Segment Message
     4.4.  Transfer End Message
     4.5.  Transfer Cancel Message
     4.6.  Padding Message
   5.  Security Considerations
   6.  Deployment Considerations
   7.  IANA Considerations
   8.  References
     8.1.  Normative References
     8.2.  Informative References
   Appendix A.  Acknowledgments
   Author's Address

1.  Introduction

   Bundle Protocol version 7 (BPv7) is defined in terms a layered
   logical architecture, detailed in [RFC9171], wherein the
   responsibility for the storing and routing of bundles lies with the
   Bundle Processing Agent (BPA), and the BPA relies upon Convergence
   Layer Adaptors (CLAs) to provide bundle transport between nodes.
   CLAs provide a unified interface to the BPA, allowing BPAs to be
   link-layer agnostic, but still use a diverse range of underlying
   link-layer protocols to transfer bundles between BPAs.

   In the realm of near- and deep-space communication there are a number
   of standard link-layer protocols, including USLP, TM, AOS, DVB-S2(X),
   that share a set of common properties:

   *  They are unidirectional.  Data transmission occurs in one
      direction only, there is no in-band return path for data.

   *  They are frame-based.  The link-layer protocol will guarantee that
      a frame of data is either delivered to the receiver in its
      entirety or not at all.  Many protocols include protection
      mechanisms against data corruption in the frame, but some do not.
      Frames may be of fixed or variable length.

   *  They are point-to-point.  Although the medium over which the data
      transmission occurs is broadcast in nature, the link-layer
      protocol provides an uncontested point-to-point communication
      channel between a single sender and a single receiver.

   *  They provide in-order delivery.  Data frames are delivered in the
      order they were transmitted, or lost, and no data frame reordering
      can occur.

   These characteristics provide a common baseline that allows the
   definition of a lightweight protocol for transferring BPv7 bundles
   meeting the requirements of a BPv7 CLA, and this document describes a
   protocol, Bundle Transfer Protocol - Unidirectional (BTP-U), suitable
   for implementation over any link-layer protocol that shares these
   characteristics.

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

2.1.  Terminology

   Within the scope of this document, the following terms have specific
   meaning:

   Bundle:  A higher-layer protocol data unit, typically a BPv7 Bundle
      as defined in [RFC9171].

   Link-layer PDU:  The protocol data unit, excluding any link-layer
      protocol specific headers or metadata that makes up a complete
      transmission unit or frame, as defined by the link-layer protocol
      specification.

   Message:  A single protocol data item, see Section 4.

   Transfer:  The context in which the transmission of the Segments of a
      single Bundle occurs, see Section 3.3.

   Segment:  In order to transfer a Bundle larger than a Link-layer PDU,
      Bundles may be subdivided into Segments in order to fit within a
      Link-layer PDU, see Section 3.3.

3.  Protocol Overview

   The purpose of the protocol is to transfer a series of Bundles
   between two nodes.  Because a Bundle is of variable length, which is
   likely to not be exactly the same size as the Link-layer PDU size,
   the protocol defines a mechanism, described in more detail in
   Section 3.3, to divide Bundles into Segments as required, such that
   each Link-layer PDU is efficiently filled with data, and one or more
   Bundles can be transferred in a minimal number of Link-layer PDUs.

   Note: This segmentation is unrelated to Bundle fragmentation as
   defined in [RFC9171].

   As a sender may prioritize the transmission of each Bundle
   differently, the protocol allows for the multiplexing of the transfer
   of Bundles, so that transmission of higher priority Bundles may
   interrupt the transmission of other Bundles, avoiding "head of line
   blocking".

   Because the underlying link-layer is assumed to be unidirectional and
   unreliable, the protocol allows the sender to repeat the transmission
   of Bundle segments as desired in order to reduce the likelihood of
   data loss.

   DIAGRAM

3.1.  Applicability

   The protocol has been designed to transfer BPv7 formatted Bundles,
   however it is equally capable of transferring any kind of binary
   data, but the protocol includes no explicit discriminator of the type
   of a particular Bundle.  If multiple different types of Bundle are to
   be transferred by a single implementation, this specification expects
   the differentiation between different Bundle types to be a matter for
   the implementation.  For example, both BPv6 ([RFC5550]) formatted
   Bundles and BPv7 Bundles can be multiplexed without issue, as the
   different formats can be distinguished by simple examination of the
   initial octets of a received Bundle.

   Although designed for any link-layer protocol that shares the
   characteristics defined in Section 1, additional specification may be
   required to map the constructs of the link-layer protocol to the
   constructs defined in this specification.

3.2.  Messages

   The basic primitive of the protocol is the Message, a self-describing
   unit of protocol control information of variable length.  The
   transmitting node is responsible for composing one or more Messages
   as required and packing them into a Link-layer PDU, such that a
   single PDU is optimally filled.  The receiving node parses the
   contained Messages from each received Link-layer PDU, and then MUST
   processes them in the order they appear in the PDU.  This ordered
   sequence of Messages from sender to receiver is the logical control-
   plane used by the protocol.

   The algorithm used to pack Messages efficiently into Link-layer PDUs
   is an implementation matter.

   See Section 4 for detail of each type of Message.

3.3.  Segmentation and Transfers

   As described in the Protocol Overview (Section 3), in order to
   transfer Bundles larger than a single Link-layer PDU into multiple
   PDUs, Bundles can be divided into ordered Segments by the sender and
   each Segment is transmitted in its own a Message.  Each Segment is
   assigned a monotonically increasing sequence number, and a receiver
   MUST reassemble the original Bundle by concatenating the Segments in
   the order of their sequence number.  However, if the complete Bundle
   can fit in the next Link-layer PDU, then the Bundle SHOULD be
   transferred without segmentation, see the Complete Bundle Message
   (Section 4.1).

   Because Segments of multiple Bundles may be transferred
   simultaneously, in addition to a sequence number every Segment has an
   associated Transfer that provides context to the sequence of Segments
   to enable the correct reassembly of Segments, and every Transfer is
   assigned a monotonically increasing number as an identifier.

   The transmission of a sequence of Segments of a Bundle begins with a
   Transfer Start Message (Section 4.2), carrying the Transfer
   identifier and the first Segment data, which indicates a new Transfer
   is starting.  Further Segments, excluding the final Segment, are
   transmitted if required via the Transfer Segment Message
   (Section 4.3), carrying the same Transfer identifier.  The end of a
   sequence of Segments is indicated by the transmission of a Transfer
   End Message (Section 4.4), including the final Segment data and the
   identifier of the Transfer that is now complete.  A Transfer may be
   aborted by the sender before all Segments are sent by the
   transmission of a Transfer Cancel Message (Section 4.5) including the
   identifier of the Transfer to cancel.

   An example of the transmission of three Bundles of varying sizes in
   three Link-layer PDUs is shown in Figure 1.  Bundle A is transmitted
   as two Segments, included in the first and second Link-layer PDU, as
   Transfer 1.  Bundle B fits completely in the second Link-layer PDU,
   and is therefore transferred without segmentation.  Bundle C is
   transferred as two Segments in the second and third PDU, but requires
   padding to fill the third PDU.  An alternative algorithm could have
   selected to not segment Bundle C, but to pad the second PDU and
   include Bundle C without segmentation in the third PDU, without
   changing the semantics, as an implementation preference.

  +------------------------------+----------+-----------------+
  | Bundle A                     | Bundle B | Bundle C        |
  +------------------------------+----------+-----------------+

  :                              :          :                 :

  +----------------------+------------------+---+-------------+--------+
  | Transfer 1           | Tr 1  | Complete | T2| Transfer 2  | Padding|
  | Segment 0            | Seg 1 |  Bundle  | S0| Segment 1   |        |
  +----------------------+------------------+---+-------------+--------+

  :                      :                      :                      :

  +----------------------+----------------------+----------------------+
  | Link-layer PDU N     | Link-layer PDU N + 1 | Link-layer PDU N + 2 |
  +----------------------+----------------------+----------------------+

    Figure 1: Segmentation of a sequence of Bundles of equal priority

3.3.1.  Interleaving Segments

   DIAGRAM!

   Transfer Segment Messages associated with different Transfers, i.e
   with different TransferId field values, MAY be interleaved, but
   Transfer Segment Messages associated with the same Transfer MUST be
   emitted in strictly ascending order of SegmentIndex field value.

3.3.2.  Transfer Number Roll-over

3.4.  Handling Link-layer PDU Loss

3.4.1.  Segment Repetition

4.  Message Definitions

   All protocol Messages follow the common "Type-Length-Value"
   formatting pattern, with each Message being identified by a 32-bit
   header that encodes the type of the Message, and the length of the
   content of the Message.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Type          | Length (24-bit unsigned integer)              |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       ... Content ...                         :
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   Type:  The type of the Message, allocated from IANA "BTPU Message
      Types" registry, expressed as a 8-bit unsigned integer in network
      byte order

   Length:  The length of the Message in octets, excluding the 4 octets
      of the header itself, expressed as a 24-bit unsigned integer in
      network byte order.

   Content:  A sequence of octets of data of variable length, determined
      by the corresponding length field, encoded according to the type
      of the Message.

4.1.  Complete Bundle Message

   The Complete Bundle Message is used to encapsulate an entire Bundle,
   and SHOULD be used by an implementation when a Bundle will fit in its
   entirety in a single Link-Layer PDU to avoid the overhead of
   processing involved with segmentation, and reducing the risk of the
   total loss of a Bundle if a one or more unnecessary segments of a
   Bundle is lost.

   A Complete Bundle Message has a type of seven (7).  The Message
   Content MUST be a valid Bundle.

4.2.  Transfer Start Message

   The Transfer Start Message is used to encapsulate the first segment
   of a new multi-segment Bundle Transfer.

   A Transfer Start Message has a type of five (5).  The Message Content
   is formatted as follows:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Transfer Number                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       ... Content ...                         :
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   Transfer Number:  The numeric identifier of the new Transfer that is
      starting, encoded as a 32-bit unsigned integer in network byte
      order.

   Content:  The octets of the first Segment of the Transfer, with the
      length calculated as the Message content length minus the four (4)
      octets of the Transfer Number.

   To reduce signalling overhead, the Transfer Start Message does not
   include a Segment Sequence Number field as the sequence number is
   implicitly zero (0).

4.3.  Transfer Segment Message

   The Transfer Segment Message is used to encapsulate the next segment
   of an existing multi-segment Bundle Transfer.

   A Transfer Segment Message has a type of one (1).  The Message
   Content is formatted as follows:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Transfer Number                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Segment Sequence Number                                       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       ... Content ...                         :
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   Transfer Number:  The numeric identifier of the Transfer that this
      Segment is part of, encoded as a 32-bit unsigned integer in
      network byte order.

   Segment Sequence Number:  The non-zero sequence number of the
      Segment, encoded as a 32-bit unsigned integer in network byte
      order.

   Content:  The octets of a Segment of the Transfer, with the length
      calculated as the Message content length minus the eight (8)
      octets of the Transfer Number and Segment Sequence Number.

4.4.  Transfer End Message

   The Transfer End Message is used to encapsulate the last segment of a
   multi-segment Bundle Transfer, and complete the Transfer.

   A Transfer End Message has a type of three (3).  The Message Content
   is formatted as follows:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Transfer Number                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Segment Sequence Number                                       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       ... Content ...                         :
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   Transfer Number:  The numeric identifier of the Transfer that is
      completing, encoded as a 32-bit unsigned integer in network byte
      order.

   Segment Sequence Number:  The sequence number of the final Segment,
      encoded as a 32-bit unsigned integer in network byte order.

   Content:  The octets of the final Segment of the Transfer, with the
      length calculated as the Message content length minus the eight
      (8) octets of the Transfer Number and Segment Sequence Number.

4.5.  Transfer Cancel Message

   The Transfer Cancel Message is used to indicate that no more Segments
   of a particular Transfer will follow, and any received Segments MUST
   be discarded by the receiver.

   A Transfer Cancel Message has a type of eleven (11).  The Message
   Content is formatted as follows:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Transfer Number                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   Transfer Number:  The numeric identifier of the Transfer that is
      cancelled, encoded as a 32-bit unsigned integer in network byte
      order.

   The Transfer Cancel Message has no additional content, and hence has
   a fixed length of 4 octets.

   A Transfer Cancel Message SHOULD NOT be sent if no prior Transfer
   Start Message with the same Transfer Number have been emitted.  A
   peer that receives a Transfer Cancel Message with a Transfer Number
   field value that does not match a prior Transfer Start Message, or a
   value that matches a prior Transfer End Message, MUST ignore the
   Message.

4.6.  Padding Message

   A Padding Message (Section 4.6) is available to cover the case when a
   particular sequence of outgoing Messages will not exactly fit into a
   Link-layer PDU.  When the link-layer protocol requires Link-layer
   PDUs of a fixed size, the Padding Message SHOULD be used in order to
   increase the total length of the concatenated Messages to meet the
   Link-layer PDU size requirement.

   A Padding Message has a type of zero (0).

   A Padding Message MUST be the final Message in a Link-layer PDU.  A
   sender SHOULD set the value of any remaining octets in the Link-layer
   PDU to zero (0), and a receiver MUST ignore any octets that follow
   the Padding Message.

   THIS DOES NOT WORK:  When the link-layer protocol provides variable
      length Link-layer PDUs, implementations SHOULD take into account
      the mechanisms used by the link-layer protocol to support variable
      length Link-layer PDUs, and emit Link-layer PDUs of a suitable
      size for the underlying protocol.  For example, if variable length
      Link-layer PDUs are implemented by the link-layer protocol using a
      sub-framing mechanism, then emitting Link-layer PDUs of a single,
      or whole number of sub-frames may increase reliability.  The
      Padding Message MAY be used to meet such requirements.

5.  Security Considerations

   TODO Security

6.  Deployment Considerations

   The protocol comes with the following caveats that should be
   considered before deployment:

   1.  It is unreliable.  Although there may be a link-layer mechanism
       for a receiver to be notified that a frame has been lost in
       transmission, due to the unidirectional nature of the link-layer
       there is no in-band return path suitable for higher-layer
       acknowledgement of transfer success.  Any acknowledgement system
       designed to provide reliability must use a logically separate
       path from receiver back to sender.

   2.  It lacks transport-layer security.  Although there may be link-
       layer mechanisms to protect the transmission of frames against
       over-hearing and interference, transport-layer security is
       considered out of scope for the protocol.  Mechanisms such as
       BPSec, defined in [RFC9172], exist to provide integrity and
       protection at the Bundle layer instead.

   3.  It does not provide congestion control or signalling.  The
       underlying link-layer is expected to provide an uncontested
       point-to-point channel, and hence such mechanisms are considered
       to be out of scope.  This makes the protocol unsuitable for
       deployment in environments where congestion may occur, such as
       the public Internet.

   4.  It requires an out-of-band mechanism for configuration.  Because
       the underlying link-layer is unidirectional, there must exist a
       mechanism to manage when a node is expected to start receiving
       data from a sender.  This can either be via pre-placed static
       configuration, a parallel dynamic control-plane protocol, or some
       other mechanism beyond the scope of this specification.

7.  IANA Considerations

   Need a new registry!

   Reserve some codepoints for CLs

8.  References

8.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC9171]  Burleigh, S., Fall, K., and E. Birrane, III, "Bundle
              Protocol Version 7", RFC 9171, DOI 10.17487/RFC9171,
              January 2022, <https://www.rfc-editor.org/rfc/rfc9171>.

8.2.  Informative References

   [RFC5550]  Cridland, D., Ed., Melnikov, A., Ed., and S. Maes, Ed.,
              "The Internet Email to Support Diverse Service
              Environments (Lemonade) Profile", RFC 5550,
              DOI 10.17487/RFC5550, August 2009,
              <https://www.rfc-editor.org/rfc/rfc5550>.

   [RFC9172]  Birrane, III, E. and K. McKeever, "Bundle Protocol
              Security (BPSec)", RFC 9172, DOI 10.17487/RFC9172, January
              2022, <https://www.rfc-editor.org/rfc/rfc9172>.

Appendix A.  Acknowledgments

   TODO acknowledge.

Author's Address

   Rick Taylor
   Aalyria Technologies
   Email: <rtaylor@aalyria.com>
